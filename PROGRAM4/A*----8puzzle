def print_grid(src):
state = src.copy()
state[state.index(-1)] = &#39; &#39;

print(
f&quot;&quot;&quot;
{state[0]} {state[1]} {state[2]}
{state[3]} {state[4]} {state[5]}
{state[6]} {state[7]} {state[8]}
&quot;&quot;&quot;
)
def h(state, target):
#Manhattan distance
dist = 0
for i in state:
d1, d2 = state.index(i), target.index(i)
x1, y1 = d1 % 3, d1 // 3
x2, y2 = d2 % 3, d2 // 3
dist += abs(x1-x2) + abs(y1-y2)
return dist
def astar(src, target):
states = [src]
g = 0
visited_states = set()
while len(states):
print(f&quot;Level: {g}&quot;)
moves = []
for state in states:
visited_states.add(tuple(state))
print_grid(state)
if state == target:
print(&quot;Success&quot;)
return
moves += [move for move in possible_moves(state, visited_states) if move not in
moves]
costs = [g + h(move, target) for move in moves]
states = [moves[i] for i in range(len(moves)) if costs[i] == min(costs)]
g += 1
if g&gt;3:
print(&quot;NO SOLUTION&quot;)
break
def possible_moves(state, visited_states):
b = state.index(-1)
d = []
if b not in [0,1,2]:
d += &#39;u&#39;
if b not in [6,7,8]:
d += &#39;d&#39;

if b not in [2,5,8]:
d += &#39;r&#39;
if b not in [0,3,6]:
d += &#39;l&#39;
pos_moves = []
for move in d:
pos_moves.append(gen(state,move,b))
return [move for move in pos_moves if tuple(move) not in visited_states]
def gen(state, direction, b):
temp = state.copy()
if direction == &#39;u&#39;:
temp[b-3], temp[b] = temp[b], temp[b-3]
if direction == &#39;d&#39;:
temp[b+3], temp[b] = temp[b], temp[b+3]
if direction == &#39;r&#39;:
temp[b+1], temp[b] = temp[b], temp[b+1]
if direction == &#39;l&#39;:
temp[b-1], temp[b] = temp[b], temp[b-1]
return temp
src = [1,2,3,-1,4,5,6,7,8]
target=[1,2,3,6,4,5,-1,7,8]
astar(src, target)
